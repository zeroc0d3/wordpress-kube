## Play Kubernetes
----------------------------
### Deploy
```
ansible-playbook -i inventory/wpkube/hosts.ini --become --become-user=root cluster.yml --flush-cache \
   --private-key=/home/user/.ssh/id_rsa \
   --limit wpkube-master,wpkube-node1
```

### Reset
```
ansible-playbook -i inventory/wpkube/hosts.ini --become --become-user=root reset.yml --flush-cache \
   --private-key=/home/user/.ssh/id_rsa \
   --limit wpkube-master,wpkube-node1
```

### Remove-Node
```
ansible-playbook -i inventory/wpkube/hosts.ini --become --become-user=root remove-node.yml --flush-cache \
   --private-key=/home/user/.ssh/id_rsa \
   --limit wpkube-master,wpkube-node1
```

## Deploy Kubernetes
----------------------------
```
ansible-playbook -i inventory/wpkube/hosts.ini --become --become-user=root cluster.yml --flush-cache \
   --private-key=/home/user/.ssh/id_rsa \
   --limit wpkube-master,wpkube-node1
```

## Check Master & Nodes
----------------------------
```
ssh root@159.65.132.34

root@wpkube-master:~# date
Sat Oct 20 03:09:12 UTC 2018
root@wpkube-master:~# kubectl get nodes
NAME    STATUS   ROLES    AGE     VERSION
wpkube-master   Ready    master   6m34s   v1.12.1
wpkube-node1    Ready    node     6m33s   v1.12.1

root@wpkube-master:~# kubectl get po --all-namespaces
NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE
kube-system   calico-kube-controllers-75ff955876-xzfpn   1/1     Running   0          4m52s
kube-system   calico-node-dv4wd                          1/1     Running   0          5m8s
kube-system   calico-node-rxqlx                          1/1     Running   0          5m8s
kube-system   kube-apiserver-wpkube-master               1/1     Running   0          5m47s
kube-system   kube-controller-manager-wpkube-master      1/1     Running   0          6m25s
kube-system   kube-dns-5bff646c-nchbw                    3/3     Running   0          4m13s
kube-system   kube-dns-5bff646c-tw66v                    0/3     Pending   0          4m1s
kube-system   kube-proxy-wpkube-master                   1/1     Running   0          6m2s
kube-system   kube-proxy-wpkube-node1                    1/1     Running   0          6m11s
kube-system   kube-scheduler-wpkube-master               1/1     Running   0          6m30s
kube-system   kubedns-autoscaler-d4fc847bf-q4th5         1/1     Running   0          4m8s
kube-system   kubernetes-dashboard-5db4d9f45f-sgl5s      1/1     Running   0          4m3s
kube-system   nginx-proxy-wpkube-node1                   1/1     Running   0          6m6s
```

## Create Access Login Dashboard
----------------------------
```
cat <<EOF | kubectl create -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system
EOF
```

```
cat <<EOF | kubectl create -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kube-system
EOF
```

## Check Secret Token
----------------------------
```
root@wpkube-master:~# kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')
Name:         admin-user-token-kdjlm
Namespace:    kube-system
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: admin-user
              kubernetes.io/service-account.uid: 3e3ea30e-d44d-11e8-851d-c248816bee84

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     1090 bytes
namespace:  11 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWtkamxtIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIzZTNlYTMwZS1kNDRkLTExZTgtODUxZC1jMjQ4ODE2YmVlODQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.Za6yQA9PfLNlC59f11qPATADLA8zJSdy1bLYYpLHkL8oBMXlFPMcpsTcXNVwEIqcyDpPe2vfAXChnB9wTdMwRfgRjClSRdNZh8Jqp3k5Xl15ThxJ13zKfQkcSLwKlleQ04m7tyD141p98aSZLjQkQ7NBuaodnBME5BrzB8xEnkWF1wY3Zdt7dTnRRv26GeYj5AyyrWMNLTHvvpk8Z4vBvUhWsUe2eaSlO8zlAR5QjTofldpPIS0Jezuar7zjyJwHmNPPRSG4OXZ-X0DIITzi0z4cmHKnng7hItFGqTZkbGylXNpcA2ltKXikuIrdc4Rv0DhCYHFr7dEvQWY_MAfLcw
```

## Edit Services
----------------------------
```
root@wpkube-master:~# kubectl -n kube-system edit service kubernetes-dashboard

Change:
-------
spec:
  ...
  type: ClusterIP
  ...

To:
-------
spec:
  ...
  type: NodePort
  ...
```

## Check Services
----------------------------
```
root@wpkube-master:~# kubectl -n kube-system get service kubernetes-dashboard
NAME                   TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)         AGE
kubernetes-dashboard   NodePort   10.233.63.95   <none>        443:30114/TCP   3m49s
```

* Login Dashboard
----------------------------
URL:
https://<master_ip>:<master_port>
https://159.65.132.34:30114

Token:
```
eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWtkamxtIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIzZTNlYTMwZS1kNDRkLTExZTgtODUxZC1jMjQ4ODE2YmVlODQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.Za6yQA9PfLNlC59f11qPATADLA8zJSdy1bLYYpLHkL8oBMXlFPMcpsTcXNVwEIqcyDpPe2vfAXChnB9wTdMwRfgRjClSRdNZh8Jqp3k5Xl15ThxJ13zKfQkcSLwKlleQ04m7tyD141p98aSZLjQkQ7NBuaodnBME5BrzB8xEnkWF1wY3Zdt7dTnRRv26GeYj5AyyrWMNLTHvvpk8Z4vBvUhWsUe2eaSlO8zlAR5QjTofldpPIS0Jezuar7zjyJwHmNPPRSG4OXZ-X0DIITzi0z4cmHKnng7hItFGqTZkbGylXNpcA2ltKXikuIrdc4Rv0DhCYHFr7dEvQWY_MAfLcw
```

----------------------------------------------------------

Install Wordpress

## Create Namespace
```
kubectl create namespace <namespace name>
----------
root@wpkube-master:~# kubectl create namespace wordpress
```

## Create MySQL Secret, File: `mysql-secret.yml`
----------------------------
```
root@wpkube-master:~# echo -n 'mys3cr3t' | base64
bXlzM2NyM3Q=

root@wpkube-master:~# echo -n 'root' | base64
cm9vdA==
```
```
root@wpkube-master:~# nano yaml_file/mysql-secret.yml
```
```
{
  "kind": "Secret",
  "apiVersion": "v1",
  "metadata": {
    "name": "mysql-pass",
    "namespace": "wordpress",
    "selfLink": "/api/v1/namespaces/wordpress/secrets/mysql-pass",
    "uid": "1acc5afa-d44e-11e8-851d-c248816bee84",
    "resourceVersion": "10418",
    "creationTimestamp": "2018-10-20T09:54:15Z"
  },
  "data": {
    "password": "bXlzM2NyM3Q=",
    "username": "cm9vdA=="
  },
  "type": "Opaque"
}
```
root@wpkube-master:~#   kubectl create -f yaml_file/mysql-secret.yml

root@wpkube-master:~#   kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-rjf5w   kubernetes.io/service-account-token   3      26m
mysql-pass            Opaque                                1      8s
```

## Create Persistant-Volume Wordpress & MySQL, File: `pv-wordpress-mysql.yml`
----------------------------
```
root@wpkube-master:~# nano yaml_file/pv-wordpress-mysql.yml
```
```
# Create PersistentVolume
# change the ip of NFS server
apiVersion: v1
kind: PersistentVolume
metadata:
  namespace: wordpress
  name: wordpress-storage
  labels:
    app: wordpress
    tier: frontend
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteMany
  nfs:
    server: 159.65.132.34
    # Exported path of your NFS server
    path: "/mnt/vol_master/html"
  persistentVolumeReclaimPolicy: Recycle

---
apiVersion: v1
kind: PersistentVolume
metadata:
  namespace: wordpress
  name: mysql-storage
  labels:
    app: wordpress
    tier: mysql
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteMany
  nfs:
    server: 159.65.132.34
    # Exported path of your NFS server
    path: "/mnt/vol_master/mysql"
  persistentVolumeReclaimPolicy: Recycle
```
```
kubectl create -f yaml_file/pv-wordpress-mysql.yml
```

## Create Persistant-Volume-Claim Wordpress & MySQL, File: `pvc-wordpress-mysql.yml`
----------------------------
```
root@wpkube-master:~# nano yaml_file/pvc-wordpress-mysql.yml
```
```
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: wordpress
  name: wordpress-volumeclaim
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: wordpress
  name: mysql-volumeclaim
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
```
```
kubectl create -f yaml_file/pvc-wordpress-mysql.yml
```

## Create MySQL Deployment, File: `mysql-deployment.yaml`
----------------------------
```
root@wpkube-master:~# nano yaml_file/mysql-deployment.yml
```
```
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: wordpress
  name: mysql
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: dockerframework/mysql:5.7
          imagePullPolicy: Always
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: password
          ports:
            - containerPort: 3306
              name: mysql
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
      dnsPolicy: ClusterFirst
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-volumeclaim
```
```
kubectl create -f yaml_file/mysql-deployment.yml
```

## Create MySQL Service, File: `mysql-service.yaml`
----------------------------
```
root@wpkube-master:~# nano yaml_file/mysql-service.yml
```
```
apiVersion: v1
kind: Service
metadata:
  namespace: wordpress
  name: mysql
  labels:
    app: mysql
spec:
  type: ClusterIP
  ports:
    - port: 3306
  selector:
    app: mysql
```
```
kubectl create -f yaml_file/mysql-service.yml
```

## Create Wordpress Deployment, File: `wordpress-deployment.yaml`
----------------------------
```
root@wpkube-master:~# nano yaml_file/wordpress-deployment.yml
```
```
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: wordpress
  name: wordpress
  labels:
    app: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - image: wordpress
          name: wordpress
          env:
          - name: WORDPRESS_DB_HOST
            value: mysql:3306
          - name: WORDPRESS_DB_USER
            valueFrom:
              secretKeyRef:
                name: mysql-pass
                key: username
          - name: WORDPRESS_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-pass
                key: password
          ports:
            - containerPort: 80
              name: wordpress
          volumeMounts:
            - name: wordpress-storage
              mountPath: /var/www/html
      volumes:
        - name: wordpress-storage
          persistentVolumeClaim:
            claimName: wordpress-volumeclaim
```
```
kubectl create -f yaml_file/wordpress-deployment.yml
```

## Create Wordpress Service, File: `wordpress-service.yaml`
----------------------------
```
root@wpkube-master:~# nano yaml_file/wordpress-service.yml
```
```
apiVersion: v1
kind: Service
metadata:
  namespace: wordpress
  labels:
    app: wordpress
  name: wordpress
spec:
  #type: LoadBalancer
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  selector:
    app: wordpress
```
```
kubectl create -f yaml_file/wordpress-service.yml
```
